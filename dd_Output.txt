------+-----------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------
 Line | # File     Line | Line Type   | MX |  Reloc  | Size | Address   Object Code |  Source Code                                                      
------+-----------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------
    1 |  1  dd.s      1 | Comment     | 11 |         |    0 | 00/8000               | * unsigned 32 bit fixed-point division  
    2 |  1  dd.s      2 | Empty       | 11 |         |    0 | 00/8000               |                                      
    3 |  1  dd.s      3 | Directive   | 11 |         |    0 | 00/8000               |                 org   $4000          
    4 |  1  dd.s      4 | Directive   | 11 |         |    0 | 00/4000               |                 put   equ            
    5 |  2 equ.s      1 | Comment     | 11 |         |    0 | 00/4000               | ************ ROM routines ************ 
    6 |  2 equ.s      2 | Equivalence | 11 |         |    0 | 00/4000               | home            equ   $FC58          ; clear text screen, reset margins
    7 |  2 equ.s      3 | Equivalence | 11 |         |    0 | 00/4000               | text            equ   $FB2F          ; text mode
    8 |  2 equ.s      4 | Equivalence | 11 |         |    0 | 00/4000               | Bell            equ   $FBDD          ; play a sound
    9 |  2 equ.s      5 | Equivalence | 11 |         |    0 | 00/4000               | cout            equ   $FDED          ; print char in A
   10 |  2 equ.s      6 | Equivalence | 11 |         |    0 | 00/4000               | vtab            equ   $FC22          ; vert. tab, value must be in CV ($25)
   11 |  2 equ.s      7 | Equivalence | 11 |         |    0 | 00/4000               | getln           equ   $FD6A          ; read line of input (=> X = length, buffer = $200)
   12 |  2 equ.s      8 | Equivalence | 11 |         |    0 | 00/4000               | getlnz          equ   $FD67          ; = return + getln
   13 |  2 equ.s      9 | Equivalence | 11 |         |    0 | 00/4000               | getln1          equ   $FD6F          ; = getln without prompt
   14 |  2 equ.s     10 | Equivalence | 11 |         |    0 | 00/4000               | bascalc         equ   $FBC1          ; calc. address of line in A, put address in $28/$29
   15 |  2 equ.s     11 | Equivalence | 11 |         |    0 | 00/4000               | crout           equ   $FD8E          ; print carriage return
   16 |  2 equ.s     12 | Equivalence | 11 |         |    0 | 00/4000               | clreop          equ   $FC42          ; clear from cursor to end of page
   17 |  2 equ.s     13 | Equivalence | 11 |         |    0 | 00/4000               | clreol          equ   $FC9C          ; clear from cursor to end of line
   18 |  2 equ.s     14 | Equivalence | 11 |         |    0 | 00/4000               | prntx           equ   $F944          ; prints X in hex (2 digits)
   19 |  2 equ.s     15 | Equivalence | 11 |         |    0 | 00/4000               | prbyte          equ   $FDDA          ; prints A in hex (2 digits)
   20 |  2 equ.s     16 | Equivalence | 11 |         |    0 | 00/4000               | printax         equ   $F941          ; Prints current contents of the A and X in hex
   21 |  2 equ.s     17 | Equivalence | 11 |         |    0 | 00/4000               | prntyx          equ   $F940          ; Prints current contents of the Y and X in hex
   22 |  2 equ.s     18 | Equivalence | 11 |         |    0 | 00/4000               | rdkey           equ   $FD0C          ; wait for keypress
   23 |  2 equ.s     19 | Equivalence | 11 |         |    0 | 00/4000               | wait            equ   $FCA8          ; monitor delay
   24 |  2 equ.s     20 | Equivalence | 11 |         |    0 | 00/4000               | AUXMOV          equ   $C311          
   25 |  2 equ.s     21 | Equivalence | 11 |         |    0 | 00/4000               | OUTPORT         equ   $FE95          
   26 |  2 equ.s     22 | Equivalence | 11 |         |    0 | 00/4000               | prnxy           equ   $F940          
   27 |  2 equ.s     23 | Equivalence | 11 |         |    0 | 00/4000               | HPOSN           equ   $F411          ; Positions hi-res“cursor” without plotting.
   28 |  2 equ.s     24 | Comment     | 11 |         |    0 | 00/4000               |                                 ; Enter with X,Y(low,high)=horizontalposition, Accumulator = verticalposition.
   29 |  2 equ.s     25 | Equivalence | 11 |         |    0 | 00/4000               | HPLOT           equ   $F457          ; Identical to HPOSN, but plots current HCOLOR at coordinates given.
   30 |  2 equ.s     26 | Equivalence | 11 |         |    0 | 00/4000               | HLIN            equ   $F53A          ; Draws a line from last plot to point given.
   31 |  2 equ.s     27 | Comment     | 11 |         |    0 | 00/4000               |                                 ; Accumulator, X (low,high) = horizontal, Y= verticalposition.
   32 |  2 equ.s     28 | Equivalence | 11 |         |    0 | 00/4000               | HCOLOR          equ   $F6F0          ; Sets HCOLOR to contents of X-Register(0−7).
   33 |  2 equ.s     29 | Comment     | 11 |         |    0 | 00/4000               | *
   34 |  2 equ.s     30 | Comment     | 11 |         |    0 | 00/4000               | ************ ROM switches ************  
   35 |  2 equ.s     31 | Equivalence | 11 |         |    0 | 00/4000               | RAMRDON         equ   $C003          ; read aux
   36 |  2 equ.s     32 | Equivalence | 11 |         |    0 | 00/4000               | RAMRDOFF        equ   $C002          ; read main
   37 |  2 equ.s     33 | Equivalence | 11 |         |    0 | 00/4000               | RAMWRTOFF       equ   $C004          ; write to main
   38 |  2 equ.s     34 | Equivalence | 11 |         |    0 | 00/4000               | RAMWRTON        equ   $C005          ; write to aux
   39 |  2 equ.s     35 | Equivalence | 11 |         |    0 | 00/4000               | ALTCHARSET0FF   equ   $C00E          
   40 |  2 equ.s     36 | Equivalence | 11 |         |    0 | 00/4000               | ALTCHARSET0N    equ   $C00F          
   41 |  2 equ.s     37 | Equivalence | 11 |         |    0 | 00/4000               | kbd             equ   $C000          ; ascii code of last key pressed (+ 128 if strobe not cleared)
   42 |  2 equ.s     38 | Equivalence | 11 |         |    0 | 00/4000               | kbdstrb         equ   $C010          
   43 |  2 equ.s     39 | Equivalence | 11 |         |    0 | 00/4000               | col80off        equ   $C00C          
   44 |  2 equ.s     40 | Equivalence | 11 |         |    0 | 00/4000               | col80on         equ   $C00D          
   45 |  2 equ.s     41 | Equivalence | 11 |         |    0 | 00/4000               | 80col           equ   $C01F          
   46 |  2 equ.s     42 | Comment     | 11 |         |    0 | 00/4000               | *
   47 |  2 equ.s     43 | Comment     | 11 |         |    0 | 00/4000               | ************ page 0 ************  
   48 |  2 equ.s     44 | Equivalence | 11 |         |    0 | 00/4000               | cv              equ   $25            
   49 |  2 equ.s     45 | Equivalence | 11 |         |    0 | 00/4000               | ch              equ   $24            
   50 |  2 equ.s     46 | Equivalence | 11 |         |    0 | 00/4000               | basl            equ   $28            
   51 |  2 equ.s     47 | Equivalence | 11 |         |    0 | 00/4000               | wndlft          equ   $20            
   52 |  2 equ.s     48 | Equivalence | 11 |         |    0 | 00/4000               | wndwdth         equ   $21            
   53 |  2 equ.s     49 | Equivalence | 11 |         |    0 | 00/4000               | wndtop          equ   $22            ; Top Margin (0 - 23, 0 is default, 20 in graphics mode)
   54 |  2 equ.s     50 | Equivalence | 11 |         |    0 | 00/4000               | wndbtm          equ   $23            
   55 |  2 equ.s     51 | Equivalence | 11 |         |    0 | 00/4000               | prompt          equ   $33            
   56 |  2 equ.s     52 | Comment     | 11 |         |    0 | 00/4000               | *
   57 |  2 equ.s     53 | Equivalence | 11 |         |    0 | 00/4000               | ourch           equ   $57B           ; Cursor's column position minus 1 (HTAB's place) in 80-column mode
   58 |  2 equ.s     54 | Equivalence | 11 |         |    0 | 00/4000               | ourcv           equ   $5FB           ; 80 col vertical pos
   59 |  2 equ.s     55 | Comment     | 11 |         |    0 | 00/4000               | *
   60 |  2 equ.s     56 | Comment     | 11 |         |    0 | 00/4000               | ************ ProDOS ************ 
   61 |  2 equ.s     57 | Equivalence | 11 |         |    0 | 00/4000               | GETBUFR         equ   $bef5          
   62 |  2 equ.s     58 | Equivalence | 11 |         |    0 | 00/4000               | FREEBUFR        equ   $BEF8          
   63 |  2 equ.s     59 | Equivalence | 11 |         |    0 | 00/4000               | devnum          equ   $BF30          ; last used device here, format : DSSS0000
   64 |  2 equ.s     60 | Equivalence | 11 |         |    0 | 00/4000               | RSHIMEM         equ   $BEFB          
   65 |  2 equ.s     61 | Comment     | 11 |         |    0 | 00/4000               | *
   66 |  2 equ.s     62 | Comment     | 11 |         |    0 | 00/4000               | ************ MLI calls (ProDOS) ************
   67 |  2 equ.s     63 | Equivalence | 11 |         |    0 | 00/4000               | MLI             equ   $BF00          
   68 |  2 equ.s     64 | Equivalence | 11 |         |    0 | 00/4000               | create          equ   $C0            
   69 |  2 equ.s     65 | Equivalence | 11 |         |    0 | 00/4000               | destroy         equ   $C1            
   70 |  2 equ.s     66 | Equivalence | 11 |         |    0 | 00/4000               | online          equ   $C5            
   71 |  2 equ.s     67 | Equivalence | 11 |         |    0 | 00/4000               | getprefix       equ   $c7            
   72 |  2 equ.s     68 | Equivalence | 11 |         |    0 | 00/4000               | setprefix       equ   $c6            
   73 |  2 equ.s     69 | Equivalence | 11 |         |    0 | 00/4000               | open            equ   $C8            
   74 |  2 equ.s     70 | Equivalence | 11 |         |    0 | 00/4000               | close           equ   $CC            
   75 |  2 equ.s     71 | Equivalence | 11 |         |    0 | 00/4000               | read            equ   $CA            
   76 |  2 equ.s     72 | Equivalence | 11 |         |    0 | 00/4000               | write           equ   $CB            
   77 |  2 equ.s     73 | Equivalence | 11 |         |    0 | 00/4000               | setmark         equ   $ce            
   78 |  2 equ.s     74 | Equivalence | 11 |         |    0 | 00/4000               | geteof          equ   $d1            
   79 |  2 equ.s     75 | Equivalence | 11 |         |    0 | 00/4000               | quit            equ   $65            
   80 |  2 equ.s     76 | Comment     | 11 |         |    0 | 00/4000               | *
   81 |  2 equ.s     77 | Comment     | 11 |         |    0 | 00/4000               | ************ FP routines ************
   82 |  2 equ.s     78 | Equivalence | 11 |         |    0 | 00/4000               | float           equ   $E2F2          ; Converts SIGNED integer in A/Y (high/lo) into FAC
   83 |  2 equ.s     79 | Equivalence | 11 |         |    0 | 00/4000               | GIVAYF          equ   $E2F2          ; idem
   84 |  2 equ.s     80 | Equivalence | 11 |         |    0 | 00/4000               | FLOAT2          equ   $EBA0          ; "Float2" entry point (https://6502disassembly.com/a2-rom/Applesoft.html#SymLDAB7)
   85 |  2 equ.s     81 | Comment     | 11 |         |    0 | 00/4000               |                                 ; Float UNSIGNED value in FAC+1,2 (hi,low)
   86 |  2 equ.s     82 | Comment     | 11 |         |    0 | 00/4000               |                                 ; X-reg = exponent ; C=0 to make value negative, C=1 to make value positive
   87 |  2 equ.s     83 | Empty       | 11 |         |    0 | 00/4000               |                                      
   88 |  2 equ.s     84 | Equivalence | 11 |         |    0 | 00/4000               | PRNTFAC         equ   $ED2E          ; Prints number in FAC (in decimal format). FAC is destroyed
   89 |  2 equ.s     85 | Equivalence | 11 |         |    0 | 00/4000               | FIN             equ   $EC4A          ; FAC = expression pointed TXTPTR
   90 |  2 equ.s     86 | Equivalence | 11 |         |    0 | 00/4000               | FNEG            equ   $EED0          ; FAC = - FAC
   91 |  2 equ.s     87 | Equivalence | 11 |         |    0 | 00/4000               | FABS            equ   $EBAF          ; FAC = ABS(FAC)
   92 |  2 equ.s     88 | Equivalence | 11 |         |    0 | 00/4000               | F2INT16         equ   $E752          ; FAC to 16 bits int in A/Y and $50/51 (low/high)
   93 |  2 equ.s     89 | Equivalence | 11 |         |    0 | 00/4000               | FADD            equ   $E7BE          ; FAC = FAC + ARG
   94 |  2 equ.s     90 | Equivalence | 11 |         |    0 | 00/4000               | FSUBT           equ   $E7AA          ; FAC = FAC - ARG
   95 |  2 equ.s     91 | Equivalence | 11 |         |    0 | 00/4000               | FMULT           equ   $E97F          ; Move the number pointed by Y,A into ARG and fall into FMULTT
   96 |  2 equ.s     92 | Equivalence | 11 |         |    0 | 00/4000               | FMULTT          equ   $E982          ; FAC = FAC x ARG
   97 |  2 equ.s     93 | Equivalence | 11 |         |    0 | 00/4000               | FDIVT           equ   $EA69          ; FAC = FAC / ARG
   98 |  2 equ.s     94 | Equivalence | 11 |         |    0 | 00/4000               | RND             equ   $EFAE          ; FAC = random number
   99 |  2 equ.s     95 | Equivalence | 11 |         |    0 | 00/4000               | FOUT            equ   $ED34          ; Create a string at the start of the stack ($100−$110)
  100 |  2 equ.s     96 | Equivalence | 11 |         |    0 | 00/4000               | MOVAF           equ   $EB63          ; Move FAC into ARG. On exit A=FACEXP and Z is set
  101 |  2 equ.s     97 | Equivalence | 11 |         |    0 | 00/4000               | CONINT          equ   $E6FB          ; Convert FAC into a single byte number in X and FACLO
  102 |  2 equ.s     98 | Equivalence | 11 |         |    0 | 00/4000               | YTOFAC          equ   $E301          ; Float y
  103 |  2 equ.s     99 | Equivalence | 11 |         |    0 | 00/4000               | MOVMF           equ   $EB2B          ; Routine to pack FP number. Address of destination must be in Y
  104 |  2 equ.s    100 | Comment     | 11 |         |    0 | 00/4000               |                                 ; (high) and X (low). Result is packed from FAC                             
  105 |  2 equ.s    101 | Equivalence | 11 |         |    0 | 00/4000               | QUINT           equ   $EBF2          ; convert fac to 16bit INT at $A0 and $A1 (fac+3/fac+4)
  106 |  2 equ.s    102 | Equivalence | 11 |         |    0 | 00/4000               | STROUT          equ   $DB3A          ;
  107 |  2 equ.s    103 | Equivalence | 11 |         |    0 | 00/4000               | LINPRT          equ   $ED24          ; Converts the unsigned hexadecimal number in X (low) and A (high) into a decimal number and displays it.
  108 |  2 equ.s    104 | Empty       | 11 |         |    0 | 00/4000               |                                      
  109 |  2 equ.s    105 | Comment     | 11 |         |    0 | 00/4000               | * A intégrer :
  110 |  2 equ.s    106 | Comment     | 11 |         |    0 | 00/4000               | *FSUB = $E7A7    OVERFLOW = $E8D5        ONE = $E913        FLOG = $E941    CONUPK = $E9E3  MUL10 = $EA39 
  111 |  2 equ.s    107 | Comment     | 11 |         |    0 | 00/4000               | * FDIV = $EA66        DIVERR = $EAE1        MOVFM = $EAF9    FLOAT = $EB93        FCOMP = $EBB2      
  112 |  2 equ.s    108 | Comment     | 11 |         |    0 | 00/4000               | * FINT = $EC23   SQR = $EE8D        FPWRT = $EE9    FEXP = $EF09      FCOS = $EFEA    FSIN = $EFF1  FTAN = $F03A 
  113 |  2 equ.s    109 | Comment     | 11 |         |    0 | 00/4000               | * PIHALF = $F066   FATN = $F09E        
  114 |  2 equ.s    110 | Comment     | 11 |         |    0 | 00/4000               | *
  115 |  2 equ.s    111 | Comment     | 11 |         |    0 | 00/4000               | ************ Applesoft BASIC ************
  116 |  2 equ.s    112 | Equivalence | 11 |         |    0 | 00/4000               | TXTTAB          equ   $67            ; $67/$68 address of beginning of BASIC Program ($0801 is default)
  117 |  2 equ.s    113 | Equivalence | 11 |         |    0 | 00/4000               | PRGEND          equ   $AF            ; $AF/$B0 address of end of Applesoft program plus 1 or 2 of BASIC
  118 |  2 equ.s    114 | Equivalence | 11 |         |    0 | 00/4000               | VARTAB          equ   $69            ; $69/$6A address of beginning of simple variables, just after Basic prog. (unless modified by LOMEN)
  119 |  2 equ.s    115 | Equivalence | 11 |         |    0 | 00/4000               | ARYTAB          equ   $6B            ; $6B/$6C addresse of beginning of array variables, just after simple variables
  120 |  2 equ.s    116 | Equivalence | 11 |         |    0 | 00/4000               | STREND          equ   $6D            ; $6D/$6E addresse of end of array variables
  121 |  2 equ.s    117 | Equivalence | 11 |         |    0 | 00/4000               | MEMSIZ          equ   $73            ; $73/$74 : top of string data, set by HIMEM: (usually $9600),
  122 |  2 equ.s    118 | Equivalence | 11 |         |    0 | 00/4000               | FRETOP          equ   $6F            ; $6F/$70 bottom of string data, growing downwards
  123 |  2 equ.s    119 | Equivalence | 11 |         |    0 | 00/4000               | CHRGOT          equ   $B7            ; get char pointed by TXTPTR in A
  124 |  2 equ.s    120 | Equivalence | 11 |         |    0 | 00/4000               | CHRGET          equ   $B1            ; advance TXTPRT and read char
  125 |  2 equ.s    121 | Equivalence | 11 |         |    0 | 00/4000               | TXTPTR          equ   $B8            ; pointer $B8/$B9 used in chrget and chrgot
  126 |  2 equ.s    122 | Equivalence | 11 |         |    0 | 00/4000               | CHKCOM          equ   $DEBE          ; check for comma and move TXTPTR forward
  127 |  2 equ.s    123 | Equivalence | 11 |         |    0 | 00/4000               | FRMNUM          equ   $DD67          ; eval num. value, variable, expression pointed by TXTPTR, advance TXTPTR
  128 |  2 equ.s    124 | Equivalence | 11 |         |    0 | 00/4000               | GETADR          equ   $E752          ; convert FAC to integer (to Y,A)
  129 |  2 equ.s    125 | Equivalence | 11 |         |    0 | 00/4000               | FRMEVL          equ   $DD7B          ; evaluate any expression, result in FAC.
  130 |  2 equ.s    126 | Equivalence | 11 |         |    0 | 00/4000               | FRESTR          equ   $E5FD          ; check if epression is a string. A = length, pointer in $5E/$5F
  131 |  2 equ.s    127 | Equivalence | 11 |         |    0 | 00/4000               | ERRDIR          equ   $E306          ; illegal direct if not running
  132 |  2 equ.s    128 | Empty       | 11 |         |    0 | 00/4000               |                                      
  133 |  2 equ.s    129 | Equivalence | 11 |         |    0 | 00/4000               | PTRGET          equ   $DFE3          ; On entry, TXTPTR must be pointing to the first character of the variable's name.
  134 |  2 equ.s    130 | Comment     | 11 |         |    0 | 00/4000               | * finds an Applesoft variable's memory address and puts a pointer to it in VARPNT ($83-$84) and in A/Y (low/hi). 
  135 |  2 equ.s    131 | Comment     | 11 |         |    0 | 00/4000               | * The variable's name is left in VARNAM ($81-$82). It will work with any type of variable (integer, array element, string..)
  136 |  2 equ.s    132 | Comment     | 11 |         |    0 | 00/4000               | * If the variable does not already exist, PTRGET will create it for you
  137 |  2 equ.s    133 | Comment     | 11 |         |    0 | 00/4000               | * Advances TXTPTR.
  138 |  2 equ.s    134 | Comment     | 11 |         |    0 | 00/4000               | * Set : vartype equ $11 ; str$=$ff, num=$00 
  139 |  2 equ.s    135 | Comment     | 11 |         |    0 | 00/4000               | * set : numtype equ $12 ; int =$80, real = $00
  140 |  2 equ.s    136 | Empty       | 11 |         |    0 | 00/4000               |                                      
  141 |  2 equ.s    137 | Equivalence | 11 |         |    0 | 00/4000               | CHKNUM          equ   $DD6A          ; verifies that the most recent var found by PTRGET was numeric.
  142 |  2 equ.s    138 | Comment     | 11 |         |    0 | 00/4000               |  *  https://www.brutaldeluxe.fr/documentation/thesourcerorsapprentice/thesourcerorsapprentice_v1n1.pdf
  143 |  2 equ.s    139 | Comment     | 11 |         |    0 | 00/4000               |  * Type mismatch error if var not numeric
  144 |  2 equ.s    140 | Empty       | 11 |         |    0 | 00/4000               |                                      
  145 |  1  dd.s      5 | Empty       | 11 |         |    0 | 00/4000               |                                      
  146 |  1  dd.s      6 | Comment     | 11 |         |    0 | 00/4000               | *<bp>
  147 |  1  dd.s      7 | Comment     | 11 |         |    0 | 00/4000               | *<sym>
  148 |  1  dd.s      8 | Empty       | 11 |         |    0 | 00/4000               | beginning                            
  149 |  1  dd.s      9 | Code        | 11 |         |    1 | 00/4000 : EA          |                 nop                  
  150 |  1  dd.s     10 | Code        | 11 |         |    3 | 00/4001 : 20 66 EA    |                 jsr   $EA66          
  151 |  1  dd.s     11 | Code        | 11 |         |    3 | 00/4004 : 20 34 ED    |                 jsr   {$ED34}        
  152 |  1  dd.s     12 | Code        | 11 |         |    3 | 00/4007 : 20 D5 40    |                 jsr   loadnumbers    
  153 |  1  dd.s     13 | Code        | 11 |         |    3 | 00/400A : 20 EC 40    |                 jsr   initvar        
  154 |  1  dd.s     14 | Code        | 11 |         |    3 | 00/400D : 20 07 41    |                 jsr   prndivid       
  155 |  1  dd.s     15 | Code        | 11 |         |    3 | 00/4010 : 20 8E FD    |                 jsr   {$FD8E}        
  156 |  1  dd.s     16 | Code        | 11 |         |    3 | 00/4013 : 20 26 40    |                 jsr   Dodivide       ; integer part
  157 |  1  dd.s     17 | Code        | 11 |         |    3 | 00/4016 : 20 07 41    |                 jsr   prndivid       
  158 |  1  dd.s     18 | Code        | 11 |         |    3 | 00/4019 : 20 8E FD    |                 jsr   {$FD8E}        
  159 |  1  dd.s     19 | Code        | 11 |         |    3 | 00/401C : 20 48 41    |                 jsr   prnrem         
  160 |  1  dd.s     20 | Code        | 11 |         |    3 | 00/401F : 20 79 40    |                 jsr   doDecimal      ; decimal part
  161 |  1  dd.s     21 | Code        | 11 |         |    3 | 00/4022 : 20 25 41    |                 jsr   prndecim       
  162 |  1  dd.s     22 | Comment     | 11 |         |    0 | 00/4025               | *<sym>
  163 |  1  dd.s     23 | Empty       | 11 |         |    0 | 00/4025               | end_of_program                       
  164 |  1  dd.s     24 | Code        | 11 |         |    1 | 00/4025 : 60          |                 rts                  
  165 |  1  dd.s     25 | Comment     | 11 |         |    0 | 00/4026               | *
  166 |  1  dd.s     26 | Comment     | 11 |         |    0 | 00/4026               | *
  167 |  1  dd.s     27 | Comment     | 11 |         |    0 | 00/4026               | *
  168 |  1  dd.s     28 | Comment     | 11 |         |    0 | 00/4026               | *
  169 |  1  dd.s     29 | Comment     | 11 |         |    0 | 00/4026               | *<sym>
  170 |  1  dd.s     30 | Comment     | 11 |         |    0 | 00/4026               | *<bp>
  171 |  1  dd.s     31 | Empty       | 11 |         |    0 | 00/4026               | Dodivide                             
  172 |  1  dd.s     32 | Code        | 11 |         |    2 | 00/4026 : A2 20       |                 ldx   #32            ;repeat for each bit: ...
  173 |  1  dd.s     33 | Comment     | 11 |         |    0 | 00/4028               | *<sym>
  174 |  1  dd.s     34 | Empty       | 11 |         |    0 | 00/4028               | divloop                              
  175 |  1  dd.s     35 | Code        | 11 |         |    3 | 00/4028 : 0E 75 41    |                 asl   dividend       
  176 |  1  dd.s     36 | Code        | 11 |         |    3 | 00/402B : 2E 76 41    |                 rol   dividend+1     
  177 |  1  dd.s     37 | Code        | 11 |         |    3 | 00/402E : 2E 77 41    |                 rol   dividend+2     
  178 |  1  dd.s     38 | Code        | 11 |         |    3 | 00/4031 : 2E 78 41    |                 rol   dividend+3     
  179 |  1  dd.s     39 | Comment     | 11 |         |    0 | 00/4034               | *<sym>
  180 |  1  dd.s     40 | Empty       | 11 |         |    0 | 00/4034               | rolrem                               
  181 |  1  dd.s     41 | Code        | 11 |         |    3 | 00/4034 : 2E 79 41    |                 rol   remainder      
  182 |  1  dd.s     42 | Code        | 11 |         |    3 | 00/4037 : 2E 7A 41    |                 rol   remainder+1    
  183 |  1  dd.s     43 | Code        | 11 |         |    3 | 00/403A : 2E 7B 41    |                 rol   remainder+2    
  184 |  1  dd.s     44 | Code        | 11 |         |    3 | 00/403D : 2E 7C 41    |                 rol   remainder+3    
  185 |  1  dd.s     45 | Empty       | 11 |         |    0 | 00/4040               |                                      
  186 |  1  dd.s     46 | Code        | 11 |         |    1 | 00/4040 : 38          |                 sec                  
  187 |  1  dd.s     47 | Code        | 11 |         |    3 | 00/4041 : AD 79 41    |                 lda   remainder      
  188 |  1  dd.s     48 | Code        | 11 |         |    3 | 00/4044 : ED 7D 41    |                 sbc   divisor        
  189 |  1  dd.s     49 | Code        | 11 |         |    3 | 00/4047 : 8D 81 41    |                 sta   tempo          
  190 |  1  dd.s     50 | Code        | 11 |         |    3 | 00/404A : AD 7A 41    |                 lda   remainder+1    
  191 |  1  dd.s     51 | Code        | 11 |         |    3 | 00/404D : ED 7E 41    |                 sbc   divisor+1      
  192 |  1  dd.s     52 | Code        | 11 |         |    3 | 00/4050 : 8D 82 41    |                 sta   tempo+1        
  193 |  1  dd.s     53 | Code        | 11 |         |    3 | 00/4053 : AD 7B 41    |                 lda   remainder+2    
  194 |  1  dd.s     54 | Code        | 11 |         |    3 | 00/4056 : ED 7F 41    |                 sbc   divisor+2      
  195 |  1  dd.s     55 | Code        | 11 |         |    3 | 00/4059 : 8D 83 41    |                 sta   tempo+2        
  196 |  1  dd.s     56 | Code        | 11 |         |    3 | 00/405C : AD 7C 41    |                 lda   remainder+3    
  197 |  1  dd.s     57 | Code        | 11 |         |    3 | 00/405F : ED 80 41    |                 sbc   divisor+3      
  198 |  1  dd.s     58 | Code        | 11 |         |    3 | 00/4062 : 8D 84 41    |                 sta   tempo+3        
  199 |  1  dd.s     59 | Empty       | 11 |         |    0 | 00/4065               |                                      
  200 |  1  dd.s     60 | Code        | 11 |         |    2 | 00/4065 : 90 0E       |                 bcc   skip           
  201 |  1  dd.s     61 | Empty       | 11 |         |    0 | 00/4067               |                                      
  202 |  1  dd.s     62 | Code        | 11 |         |    2 | 00/4067 : A0 03       |                 ldy   #3             
  203 |  1  dd.s     63 | Comment     | 11 |         |    0 | 00/4069               | *<sym>
  204 |  1  dd.s     64 | Empty       | 11 |         |    0 | 00/4069               | m43                                  
  205 |  1  dd.s     65 | Code        | 11 |         |    3 | 00/4069 : B9 81 41    |                 lda   tempo,y        
  206 |  1  dd.s     66 | Code        | 11 |         |    3 | 00/406C : 99 79 41    |                 sta   remainder,y    
  207 |  1  dd.s     67 | Code        | 11 |         |    1 | 00/406F : 88          |                 dey                  
  208 |  1  dd.s     68 | Code        | 11 |         |    2 | 00/4070 : 10 F7       |                 bpl   m43            
  209 |  1  dd.s     69 | Empty       | 11 |         |    0 | 00/4072               |                                      
  210 |  1  dd.s     70 | Code        | 11 |         |    3 | 00/4072 : EE 75 41    |                 inc   {dividend}     
  211 |  1  dd.s     71 | Empty       | 11 |         |    0 | 00/4075               |                                      
  212 |  1  dd.s     72 | Comment     | 11 |         |    0 | 00/4075               | *<sym>
  213 |  1  dd.s     73 | Empty       | 11 |         |    0 | 00/4075               | skip                                 
  214 |  1  dd.s     74 | Code        | 11 |         |    1 | 00/4075 : CA          |                 dex                  
  215 |  1  dd.s     75 | Code        | 11 |         |    2 | 00/4076 : D0 B0       |                 bne   divloop        
  216 |  1  dd.s     76 | Code        | 11 |         |    1 | 00/4078 : 60          |                 rts                  ; end of division
  217 |  1  dd.s     77 | Empty       | 11 |         |    0 | 00/4079               |                                      
  218 |  1  dd.s     78 | Empty       | 11 |         |    0 | 00/4079               |                                      
  219 |  1  dd.s     79 | Comment     | 11 |         |    0 | 00/4079               | **************
  220 |  1  dd.s     80 | Comment     | 11 |         |    0 | 00/4079               | *<sym>
  221 |  1  dd.s     81 | Empty       | 11 |         |    0 | 00/4079               | doDecimal                            
  222 |  1  dd.s     82 | Empty       | 11 |         |    0 | 00/4079               |                                      
  223 |  1  dd.s     83 | Code        | 11 |         |    2 | 00/4079 : A2 20       |                 ldx   #32            
  224 |  1  dd.s     84 | Comment     | 11 |         |    0 | 00/407B               | *<sym>
  225 |  1  dd.s     85 | Empty       | 11 |         |    0 | 00/407B               | divloopdec                           ; on entry, remainder < divisor
  226 |  1  dd.s     86 | Code        | 11 |         |    3 | 00/407B : 0E 79 41    |                 asl   remainder      ; remainder = remainder * 2
  227 |  1  dd.s     87 | Code        | 11 |         |    3 | 00/407E : 2E 7A 41    |                 rol   remainder+1    
  228 |  1  dd.s     88 | Code        | 11 |         |    3 | 00/4081 : 2E 7B 41    |                 rol   remainder+2    
  229 |  1  dd.s     89 | Code        | 11 |         |    3 | 00/4084 : 2E 7C 41    |                 rol   remainder+3    
  230 |  1  dd.s     90 | Empty       | 11 |         |    0 | 00/4087               |                                      
  231 |  1  dd.s     91 | Code        | 11 |         |    1 | 00/4087 : 38          |                 sec                  
  232 |  1  dd.s     92 | Code        | 11 |         |    3 | 00/4088 : AD 79 41    |                 lda   remainder      ; A / Y = remainder - divisor
  233 |  1  dd.s     93 | Code        | 11 |         |    3 | 00/408B : ED 7D 41    |                 sbc   divisor        
  234 |  1  dd.s     94 | Code        | 11 |         |    3 | 00/408E : 8D 81 41    |                 sta   tempo          
  235 |  1  dd.s     95 | Code        | 11 |         |    3 | 00/4091 : AD 7A 41    |                 lda   remainder+1    
  236 |  1  dd.s     96 | Code        | 11 |         |    3 | 00/4094 : ED 7E 41    |                 sbc   divisor+1      
  237 |  1  dd.s     97 | Code        | 11 |         |    3 | 00/4097 : 8D 82 41    |                 sta   tempo+1        
  238 |  1  dd.s     98 | Code        | 11 |         |    3 | 00/409A : AD 7B 41    |                 lda   remainder+2    
  239 |  1  dd.s     99 | Code        | 11 |         |    3 | 00/409D : ED 7F 41    |                 sbc   divisor+2      
  240 |  1  dd.s    100 | Code        | 11 |         |    3 | 00/40A0 : 8D 83 41    |                 sta   tempo+2        
  241 |  1  dd.s    101 | Code        | 11 |         |    3 | 00/40A3 : AD 7C 41    |                 lda   remainder+3    
  242 |  1  dd.s    102 | Code        | 11 |         |    3 | 00/40A6 : ED 80 41    |                 sbc   divisor+3      
  243 |  1  dd.s    103 | Code        | 11 |         |    3 | 00/40A9 : 8D 84 41    |                 sta   tempo+3        
  244 |  1  dd.s    104 | Code        | 11 |         |    1 | 00/40AC : 08          |                 php                  ; save carry.
  245 |  1  dd.s    105 | Comment     | 11 |         |    0 | 00/40AD               |                                 ; carry is set if remainder >= divisor 
  246 |  1  dd.s    106 | Comment     | 11 |         |    0 | 00/40AD               |                                 ; (ie. substraction result is >= 0)
  247 |  1  dd.s    107 | Comment     | 11 |         |    0 | 00/40AD               |                                 ; 
  248 |  1  dd.s    108 | Code        | 11 |         |    3 | 00/40AD : 2E 71 41    |                 rol   decimal        ; result shifted left, carry enters right
  249 |  1  dd.s    109 | Code        | 11 |         |    3 | 00/40B0 : 2E 72 41    |                 rol   decimal+1      ; if carry clear, 0 enters in result
  250 |  1  dd.s    110 | Code        | 11 |         |    3 | 00/40B3 : 2E 73 41    |                 rol   decimal+2      ; if carry set, 1 enters in result
  251 |  1  dd.s    111 | Code        | 11 |         |    3 | 00/40B6 : 2E 74 41    |                 rol   decimal+3      
  252 |  1  dd.s    112 | Code        | 11 |         |    1 | 00/40B9 : 28          |                 plp                  ; restore carry
  253 |  1  dd.s    113 | Code        | 11 |         |    2 | 00/40BA : 90 15       |                 bcc   skipdec        ; if carry clear (<=> remainder < divisor) then loop
  254 |  1  dd.s    114 | Empty       | 11 |         |    0 | 00/40BC               |                                      
  255 |  1  dd.s    115 | Empty       | 11 |         |    0 | 00/40BC               |                                      
  256 |  1  dd.s    116 | Code        | 11 |         |    3 | 00/40BC : 8D 7C 41    |                 sta   remainder+3    ; else, remainder = remainder
  257 |  1  dd.s    117 | Code        | 11 |         |    3 | 00/40BF : AD 83 41    |                 lda   tempo+2        
  258 |  1  dd.s    118 | Code        | 11 |         |    3 | 00/40C2 : 8D 7B 41    |                 sta   remainder+2    
  259 |  1  dd.s    119 | Code        | 11 |         |    3 | 00/40C5 : AD 82 41    |                 lda   tempo+1        
  260 |  1  dd.s    120 | Code        | 11 |         |    3 | 00/40C8 : 8D 7A 41    |                 sta   remainder+1    
  261 |  1  dd.s    121 | Code        | 11 |         |    3 | 00/40CB : AD 81 41    |                 lda   tempo          
  262 |  1  dd.s    122 | Code        | 11 |         |    3 | 00/40CE : 8D 79 41    |                 sta   remainder      
  263 |  1  dd.s    123 | Empty       | 11 |         |    0 | 00/40D1               |                                      
  264 |  1  dd.s    124 | Comment     | 11 |         |    0 | 00/40D1               | *<sym>
  265 |  1  dd.s    125 | Empty       | 11 |         |    0 | 00/40D1               | skipdec                              
  266 |  1  dd.s    126 | Empty       | 11 |         |    0 | 00/40D1               |                                      
  267 |  1  dd.s    127 | Code        | 11 |         |    1 | 00/40D1 : CA          |                 dex                  ; next loop
  268 |  1  dd.s    128 | Code        | 11 |         |    2 | 00/40D2 : D0 A7       |                 bne   divloopdec     
  269 |  1  dd.s    129 | Code        | 11 |         |    1 | 00/40D4 : 60          |                 rts                  
  270 |  1  dd.s    130 | Comment     | 11 |         |    0 | 00/40D5               | **************
  271 |  1  dd.s    131 | Empty       | 11 |         |    0 | 00/40D5               |                                      
  272 |  1  dd.s    132 | Comment     | 11 |         |    0 | 00/40D5               | * * * * * * * * * * * * * * * * * * * * 
  273 |  1  dd.s    133 | Comment     | 11 |         |    0 | 00/40D5               | *               Functions
  274 |  1  dd.s    134 | Comment     | 11 |         |    0 | 00/40D5               | * * * * * * * * * * * * * * * * * * * * 
  275 |  1  dd.s    135 | Comment     | 11 |         |    0 | 00/40D5               | *<sym>
  276 |  1  dd.s    136 | Empty       | 11 |         |    0 | 00/40D5               | loadnumbers                          
  277 |  1  dd.s    137 | Empty       | 11 |         |    0 | 00/40D5               |                                      
  278 |  1  dd.s    138 | Code        | 11 |         |    2 | 00/40D5 : A2 03       |                 ldx   #3             
  279 |  1  dd.s    139 | Comment     | 11 |         |    0 | 00/40D7               | *<sym>
  280 |  1  dd.s    140 | Empty       | 11 |         |    0 | 00/40D7               | m4                                   
  281 |  1  dd.s    141 | Code        | 11 |         |    3 | 00/40D7 : BD 69 41    |                 lda   val1,x         
  282 |  1  dd.s    142 | Code        | 11 |         |    3 | 00/40DA : 9D 75 41    |                 sta   dividend,x     
  283 |  1  dd.s    143 | Code        | 11 |         |    1 | 00/40DD : CA          |                 dex                  
  284 |  1  dd.s    144 | Code        | 11 |         |    2 | 00/40DE : 10 F7       |                 bpl   m4             
  285 |  1  dd.s    145 | Empty       | 11 |         |    0 | 00/40E0               |                                      
  286 |  1  dd.s    146 | Code        | 11 |         |    2 | 00/40E0 : A2 03       |                 ldx   #3             
  287 |  1  dd.s    147 | Comment     | 11 |         |    0 | 00/40E2               | *<sym>
  288 |  1  dd.s    148 | Empty       | 11 |         |    0 | 00/40E2               | m42                                  
  289 |  1  dd.s    149 | Code        | 11 |         |    3 | 00/40E2 : BD 6D 41    |                 lda   val2,x         
  290 |  1  dd.s    150 | Code        | 11 |         |    3 | 00/40E5 : 9D 7D 41    |                 sta   divisor,x      
  291 |  1  dd.s    151 | Code        | 11 |         |    1 | 00/40E8 : CA          |                 dex                  
  292 |  1  dd.s    152 | Code        | 11 |         |    2 | 00/40E9 : 10 F7       |                 bpl   m42            
  293 |  1  dd.s    153 | Code        | 11 |         |    1 | 00/40EB : 60          |                 rts                  
  294 |  1  dd.s    154 | Empty       | 11 |         |    0 | 00/40EC               |                                      
  295 |  1  dd.s    155 | Comment     | 11 |         |    0 | 00/40EC               | *<sym>
  296 |  1  dd.s    156 | Empty       | 11 |         |    0 | 00/40EC               | initvar                              
  297 |  1  dd.s    157 | Code        | 11 |         |    2 | 00/40EC : A9 00       |                 lda   #0             
  298 |  1  dd.s    158 | Code        | 11 |         |    3 | 00/40EE : 8D 71 41    |                 sta   decimal        
  299 |  1  dd.s    159 | Code        | 11 |         |    3 | 00/40F1 : 8D 72 41    |                 sta   decimal+1      
  300 |  1  dd.s    160 | Code        | 11 |         |    3 | 00/40F4 : 8D 73 41    |                 sta   decimal+2      
  301 |  1  dd.s    161 | Code        | 11 |         |    3 | 00/40F7 : 8D 74 41    |                 sta   decimal+3      
  302 |  1  dd.s    162 | Empty       | 11 |         |    0 | 00/40FA               |                                      
  303 |  1  dd.s    163 | Code        | 11 |         |    3 | 00/40FA : 8D 79 41    |                 sta   remainder      
  304 |  1  dd.s    164 | Code        | 11 |         |    3 | 00/40FD : 8D 7A 41    |                 sta   remainder+1    
  305 |  1  dd.s    165 | Code        | 11 |         |    3 | 00/4100 : 8D 7B 41    |                 sta   remainder+2    
  306 |  1  dd.s    166 | Code        | 11 |         |    3 | 00/4103 : 8D 7C 41    |                 sta   remainder+3    
  307 |  1  dd.s    167 | Code        | 11 |         |    1 | 00/4106 : 60          |                 rts                  
  308 |  1  dd.s    168 | Empty       | 11 |         |    0 | 00/4107               |                                      
  309 |  1  dd.s    169 | Comment     | 11 |         |    0 | 00/4107               | *<sym>
  310 |  1  dd.s    170 | Empty       | 11 |         |    0 | 00/4107               | prndivid                             
  311 |  1  dd.s    171 | Empty       | 11 |         |    0 | 00/4107               |                                      
  312 |  1  dd.s    172 | Code        | 11 |         |    2 | 00/4107 : A9 A4       |                 lda   #"$"           
  313 |  1  dd.s    173 | Code        | 11 |         |    3 | 00/4109 : 20 ED FD    |                 jsr   {$FDED}        
  314 |  1  dd.s    174 | Empty       | 11 |         |    0 | 00/410C               |                                      
  315 |  1  dd.s    175 | Code        | 11 |         |    3 | 00/410C : AD 78 41    |                 lda   dividend+3     
  316 |  1  dd.s    176 | Code        | 11 |         |    3 | 00/410F : 20 DA FD    |                 jsr   {$FDDA}        
  317 |  1  dd.s    177 | Code        | 11 |         |    3 | 00/4112 : AD 77 41    |                 lda   dividend+2     
  318 |  1  dd.s    178 | Code        | 11 |         |    3 | 00/4115 : 20 DA FD    |                 jsr   {$FDDA}        
  319 |  1  dd.s    179 | Code        | 11 |         |    3 | 00/4118 : AD 76 41    |                 lda   dividend+1     
  320 |  1  dd.s    180 | Code        | 11 |         |    3 | 00/411B : 20 DA FD    |                 jsr   {$FDDA}        
  321 |  1  dd.s    181 | Code        | 11 |         |    3 | 00/411E : AD 75 41    |                 lda   dividend       
  322 |  1  dd.s    182 | Code        | 11 |         |    3 | 00/4121 : 20 DA FD    |                 jsr   {$FDDA}        
  323 |  1  dd.s    183 | Code        | 11 |         |    1 | 00/4124 : 60          |                 rts                  
  324 |  1  dd.s    184 | Empty       | 11 |         |    0 | 00/4125               |                                      
  325 |  1  dd.s    185 | Comment     | 11 |         |    0 | 00/4125               | *<sym>
  326 |  1  dd.s    186 | Empty       | 11 |         |    0 | 00/4125               | prndecim                             
  327 |  1  dd.s    187 | Code        | 11 |         |    2 | 00/4125 : A9 A0       |                 lda   #" "           
  328 |  1  dd.s    188 | Code        | 11 |         |    3 | 00/4127 : 20 ED FD    |                 jsr   {$FDED}        
  329 |  1  dd.s    189 | Code        | 11 |         |    2 | 00/412A : A9 A4       |                 lda   #"$"           
  330 |  1  dd.s    190 | Code        | 11 |         |    3 | 00/412C : 20 ED FD    |                 jsr   {$FDED}        
  331 |  1  dd.s    191 | Code        | 11 |         |    3 | 00/412F : AD 74 41    |                 lda   decimal+3      
  332 |  1  dd.s    192 | Code        | 11 |         |    3 | 00/4132 : 20 DA FD    |                 jsr   {$FDDA}        
  333 |  1  dd.s    193 | Code        | 11 |         |    3 | 00/4135 : AD 73 41    |                 lda   decimal+2      
  334 |  1  dd.s    194 | Code        | 11 |         |    3 | 00/4138 : 20 DA FD    |                 jsr   {$FDDA}        
  335 |  1  dd.s    195 | Code        | 11 |         |    3 | 00/413B : AD 72 41    |                 lda   decimal+1      
  336 |  1  dd.s    196 | Code        | 11 |         |    3 | 00/413E : 20 DA FD    |                 jsr   {$FDDA}        
  337 |  1  dd.s    197 | Code        | 11 |         |    3 | 00/4141 : AD 71 41    |                 lda   decimal        
  338 |  1  dd.s    198 | Code        | 11 |         |    3 | 00/4144 : 20 DA FD    |                 jsr   {$FDDA}        
  339 |  1  dd.s    199 | Code        | 11 |         |    1 | 00/4147 : 60          |                 rts                  
  340 |  1  dd.s    200 | Empty       | 11 |         |    0 | 00/4148               |                                      
  341 |  1  dd.s    201 | Comment     | 11 |         |    0 | 00/4148               | *<sym>
  342 |  1  dd.s    202 | Empty       | 11 |         |    0 | 00/4148               | prnrem                               
  343 |  1  dd.s    203 | Code        | 11 |         |    3 | 00/4148 : 20 8E FD    |                 jsr   {$FD8E}        
  344 |  1  dd.s    204 | Code        | 11 |         |    2 | 00/414B : A9 A4       |                 lda   #"$"           
  345 |  1  dd.s    205 | Code        | 11 |         |    3 | 00/414D : 20 ED FD    |                 jsr   {$FDED}        
  346 |  1  dd.s    206 | Empty       | 11 |         |    0 | 00/4150               |                                      
  347 |  1  dd.s    207 | Code        | 11 |         |    3 | 00/4150 : AD 7C 41    |                 lda   remainder+3    
  348 |  1  dd.s    208 | Code        | 11 |         |    3 | 00/4153 : 20 DA FD    |                 jsr   {$FDDA}        
  349 |  1  dd.s    209 | Code        | 11 |         |    3 | 00/4156 : AD 7B 41    |                 lda   remainder+2    
  350 |  1  dd.s    210 | Code        | 11 |         |    3 | 00/4159 : 20 DA FD    |                 jsr   {$FDDA}        
  351 |  1  dd.s    211 | Code        | 11 |         |    3 | 00/415C : AD 7A 41    |                 lda   remainder+1    
  352 |  1  dd.s    212 | Code        | 11 |         |    3 | 00/415F : 20 DA FD    |                 jsr   {$FDDA}        
  353 |  1  dd.s    213 | Code        | 11 |         |    3 | 00/4162 : AD 79 41    |                 lda   remainder      
  354 |  1  dd.s    214 | Code        | 11 |         |    3 | 00/4165 : 20 DA FD    |                 jsr   {$FDDA}        
  355 |  1  dd.s    215 | Code        | 11 |         |    1 | 00/4168 : 60          |                 rts                  
  356 |  1  dd.s    216 | Empty       | 11 |         |    0 | 00/4169               |                                      
  357 |  1  dd.s    217 | Empty       | 11 |         |    0 | 00/4169               |                                      
  358 |  1  dd.s    218 | Comment     | 11 |         |    0 | 00/4169               | * * * * * * * * * * * * * * * * * * * * 
  359 |  1  dd.s    219 | Comment     | 11 |         |    0 | 00/4169               | *                  Data
  360 |  1  dd.s    220 | Comment     | 11 |         |    0 | 00/4169               | * * * * * * * * * * * * * * * * * * * * 
  361 |  1  dd.s    221 | Comment     | 11 |         |    0 | 00/4169               | *<sym>
  362 |  1  dd.s    222 | Empty       | 11 |         |    0 | 00/4169               | val1                                 
  363 |  1  dd.s    223 | Comment     | 11 |         |    0 | 00/4169               | *hex 002D3101            ; 20 000 000 
  364 |  1  dd.s    224 | Data        | 11 |         |    4 | 00/4169 : 64 23 5D 65 |                 hex   64235d65       ; $655d2364 = 1700602724
  365 |  1  dd.s    225 | Comment     | 11 |         |    0 | 00/416D               | *<sym>
  366 |  1  dd.s    226 | Data        | 11 |         |    4 | 00/416D : 0F 00 00 00 | val2            hex   0F000000       ; 15
  367 |  1  dd.s    227 | Empty       | 11 |         |    0 | 00/4171               |                                      
  368 |  1  dd.s    228 | Comment     | 11 |         |    0 | 00/4171               | *<sym>
  369 |  1  dd.s    229 | Data        | 11 |         |    4 | 00/4171 : 00 00 00 00 | decimal         ds    4              
  370 |  1  dd.s    230 | Empty       | 11 |         |    0 | 00/4175               |                                      
  371 |  1  dd.s    231 | Comment     | 11 |         |    0 | 00/4175               | *<m1>
  372 |  1  dd.s    232 | Comment     | 11 |         |    0 | 00/4175               | *<sym>
  373 |  1  dd.s    233 | Data        | 11 |         |    4 | 00/4175 : 00 00 00 00 | dividend        ds    4              
  374 |  1  dd.s    234 | Empty       | 11 |         |    0 | 00/4179               |                                      
  375 |  1  dd.s    235 | Comment     | 11 |         |    0 | 00/4179               | *<m2>
  376 |  1  dd.s    236 | Comment     | 11 |         |    0 | 00/4179               | *<sym>
  377 |  1  dd.s    237 | Data        | 11 |         |    4 | 00/4179 : 00 00 00 00 | remainder       ds    4              
  378 |  1  dd.s    238 | Comment     | 11 |         |    0 | 00/417D               | *<sym>
  379 |  1  dd.s    239 | Data        | 11 |         |    4 | 00/417D : 00 00 00 00 | divisor         ds    4              
  380 |  1  dd.s    240 | Comment     | 11 |         |    0 | 00/4181               | *<sym>
  381 |  1  dd.s    241 | Data        | 11 |         |    4 | 00/4181 : 00 00 00 00 | tempo           ds    4              
  382 |  1  dd.s    242 | Empty       | 11 |         |    0 | 00/4185               |                                      
  383 |  1  dd.s    243 | Equivalence | 11 |         |    0 | 00/4185               | result          =     dividend       
  384 |  1  dd.s    244 | Empty       | 11 |         |    0 | 00/4185               |                                      
  385 |  1  dd.s    245 | Empty       | 11 |         |    0 | 00/4185               |                                      
  386 |  1  dd.s    246 | Empty       | 11 |         |    0 | 00/4185               |                                      
------+-----------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------
